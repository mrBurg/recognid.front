import axios from 'axios';
import Router from 'next/router';

import { EnrollmentProcessor, PhotoIDMatchProcessor } from '../processors';
import {
  // TControllerProps,
  TLatestNetworkResponseStatus,
  TLatestProcessor,
  TProcessor,
  TStatus,
} from '../@types';
import {
  FaceTecIDScanResult,
  FaceTecSessionResult,
} from '../declarations/FaceTecPublicApi';
import { Config } from '../config/Config';

export class Controller {
  private downtimeTimer: NodeJS.Timeout;
  latestEnrollmentIdentifier = '';
  latestSessionResult = null;
  latestIDScanResult = null;
  latestProcessor: TLatestProcessor;

  constructor(
    private cfg: Config // private controller: TControllerProps
  ) {
    this.cfg.initializeFromAutogeneratedConfig((initializedSuccessfully) => {
      console.log(
        this.cfg.sdk.getFriendlyDescriptionForFaceTecSDKStatus(
          this.cfg.sdk.getStatus()
        )
      );

      if (initializedSuccessfully) {
        this.cfg.initLocalization();
        // this.controller.setInitialized(true);
        console.log('FaceTecSDK initialized');

        switch (this.cfg.flow) {
          case 0:
            this.onEnrollUserPressed();
            break;
          case 1:
            this.onPhotoIDMatchPressed();
            break;
        }

        // AppUtilities.setVocalGuidanceSoundFiles();

        return;
      }

      this.statusUpload({
        id: this.cfg.sdk.getStatus(),
        name: this.cfg.sdk.FaceTecSDKStatus[this.cfg.sdk.getStatus()],
        class: 'SDKStatus',
      });
    });
  }

  reloadDowntime() {
    clearTimeout(this.downtimeTimer);
    this.downtimeTimer = setTimeout(this.downtime, this.cfg.downtime.value);
  }

  async statusUpload(status: TStatus) {
    clearTimeout(this.downtimeTimer);
    try {
      const response = await axios.post(this.cfg.paths.statusUpload, {
        operationId: this.cfg.id,
        status,
      });

      // Редирект после отправки статуса
      if (response.status == 200 && response.data.redirectURI) {
        // console.log('Redirect', response.data.redirectURI);

        Router.replace(response.data.redirectURI);
      }
    } catch (err) {
      console.log(err);
    }
  }

  private downtime = () => {
    clearTimeout(this.downtimeTimer);

    this.statusUpload({
      id: -1,
      name: 'Timeout',
      class: 'RecognID',
    });
  };

  private startProcess(Processor: TProcessor) {
    // AppUtilities.fadeOutMainUIAndPrepareForSession();

    this.reloadDowntime();

    this.latestEnrollmentIdentifier = this.cfg.id;
    this.latestProcessor = new Processor(this.cfg, this);
  }

  onEnrollUserPressed() {
    this.startProcess(EnrollmentProcessor);
  }

  onPhotoIDMatchPressed() {
    this.startProcess(PhotoIDMatchProcessor);
  }

  onVocalGuidanceSettingsButtonPressed() {
    console.log('onVocalGuidanceSettingsButtonPressed');

    // AppUtilities.setVocalGuidanceMode();
  }

  async onViewAuditTrailPressed() {
    if (this.cfg.paths.auditTrailPath) {
      return Router.push(this.cfg.paths.auditTrailPath);
    }

    console.log('Audit trail path not found');

    // AppUtilities.showAuditTrailImages(latestSessionResult, latestIDScanResult);
  }

  onComplete(
    sessionResult: FaceTecSessionResult,
    idScanResult: FaceTecIDScanResult,
    latestNetworkResponseStatus: TLatestNetworkResponseStatus
  ) {
    this.latestSessionResult = sessionResult;
    this.latestIDScanResult = idScanResult;

    let currentStatus = this.latestSessionResult.status;

    if (this.latestIDScanResult) {
      currentStatus = this.latestIDScanResult.status;
    }

    if (currentStatus) {
      this.statusUpload({
        id: currentStatus,
        name: this.cfg.sdk.FaceTecSessionStatus[currentStatus],
        class: 'SessionStatus',
      });
    }

    // showAdditionalScreensServerIsDown();

    if (this.latestProcessor.isSuccess()) {
      // AppUtilities.displayStatus('Success');
    } else {
      if (
        this.isNetworkResponseServerIsOffline(latestNetworkResponseStatus) ===
        true
      ) {
        // this.showAdditionalScreensServerIsDown();

        return;
      }
    }

    // AppUtilities.showMainUI();
  }

  clearLatestEnrollmentIdentifier() {
    this.latestEnrollmentIdentifier = '';
  }

  isNetworkResponseServerIsOffline(networkResponseStatus: number) {
    return networkResponseStatus >= 500;
  }

  onServerSessionTokenError() {
    console.log('onServerSessionTokenError');

    // AppUtilities.handleErrorGettingServerSessionToken();
  }

  showAdditionalScreensServerIsDown() {
    console.log('showAdditionalScreensServerIsDown');

    // AdditionalScreens.showServerUpGradeView();
  }
}
