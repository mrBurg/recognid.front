import {
  TLocaleConfig,
  TConfigPaths,
  TConfigProps,
  TThemeConfig,
  TFacetecSdk,
  TInitializeFromAutogeneratedConfigCallback,
  TDowntimeConfig,
} from '../@types';

import faceTecStrings from './FaceTecStrings_en.json';
// import ocrLocalization from './FaceTecOCRCustomization.json';
import { Theme } from '../themes';
export class Config {
  id: string;
  session: string;
  partner: string;

  ProductionKey: string;
  DeviceKeyIdentifier: string;
  PublicFaceScanEncryptionKey: string;

  locale: TLocaleConfig;
  downtime: TDowntimeConfig;
  theme: TThemeConfig;

  flow: number;
  paths: TConfigPaths;

  constructor(public sdk: TFacetecSdk, props: TConfigProps) {
    this.id = props.id;
    this.session = props.session;
    this.partner = props.partner;

    this.ProductionKey = props.ProductionKey;
    this.DeviceKeyIdentifier = props.DeviceKeyIdentifier;
    this.PublicFaceScanEncryptionKey = props.PublicFaceScanEncryptionKey;

    this.locale = props.locale;
    this.downtime = {
      value: props.downtime.value * 1000,
    };
    this.theme = props.theme;

    this.flow = props.flow;
    this.paths = props.paths;

    this.sdk.setResourceDirectory(`${this.paths.staticRoot}/resources`);
    this.sdk.setImagesDirectory(`${this.paths.staticRoot}/images`);
    new Theme(sdk, this.theme);
  }

  initializeFromAutogeneratedConfig(
    callback: TInitializeFromAutogeneratedConfigCallback
  ) {
    if (this.ProductionKey) {
      this.sdk.initializeInProductionMode(
        this.ProductionKey,
        this.DeviceKeyIdentifier,
        this.PublicFaceScanEncryptionKey,
        callback
      );
    } else {
      this.sdk.initializeInDevelopmentMode(
        this.DeviceKeyIdentifier,
        this.PublicFaceScanEncryptionKey,
        callback
      );
    }
  }

  initLocalization() {
    this.sdk.configureLocalization(
      (this.locale as { [key: string]: string }) || faceTecStrings
    );
    // this.sdk.configureOCRLocalization(ocrLocalization);
  }
}
